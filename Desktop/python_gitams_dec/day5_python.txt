Collection types:
List
Tuple
Set
Dictionary

List:
One of the Data Structure in Python
Data Structure means to store, sort and Search Options
It's one Common Data structure in Python, 
the items of List separeted by comma and enclosed in square brackets []
#slice operator on lists
# update,del work outs,repetetion (*) on lists
#max,min,sum,len functions of list
# how many ways we are printing list items
# append(),insert(),count(),index(),pop(),sort() are Methods of List Object
list1 = [1,2,3,4,5]
list2 = ["Gitam",1,2,1.89,"Vizg"]

li = [1,8,16,9,2] 
print(li) # Will print the All the list items
print(li[0]) #Access the first item of the list
print(li[1]) # Access the second item of the list
print(li[-1]) # Access the last item of the list
print(li[-2]) # Access the last second item of the list
print(li[2:])
print(li[2:4])
print(li[::2])
[1, 8, 16, 9, 2]
1
8
2
9
[16, 9, 2]
[16, 9]
[1, 16, 2]

li = ["Gitam",1582,2018,2019,"Vizag"]
print(li)
# Update the list item with value using Index
li[1] = 1234
print(li)
['Gitam', 1582, 2018, 2019, 'Vizag']
['Gitam', 1234, 2018, 2019, 'Vizag']

# Delete the list item from the List
del li[3]
print(li)
['Gitam', 1234, 2018, 'Vizag']
In [10]:
# Basic List Operations
li = [1,2,3,4,5]
# Len of the List
print(len(li))
# List Repetition
print(li * 2)
# To know certain item is present in the list or not
print(4 in li)
print(10 in li)
# Access the list items from the Iterations
# 1 way to define
for i in range(len(li)):
    print(li[i],end=' ')
print()
# 2 way to print the list items
for i in li:
    print(i,end=' ')
5
[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
True
False
1 2 3 4 5 
1 2 3 4 5 
In [11]:
# Basic List Functions
li = [1,9,16,25,5]
print(max(li)) # Max number of the List
print(min(li)) # Min number of the list
print(sum(li)) # Sum of All list items
print(sum(li)//len(li)) #Avg of List items
25
1
56
11


li = [1,9,16,25,5]
li.append(29) # Add the new item at the end of list
li.insert(2,56) # Add the new item at the specific index
li.append(9)
li.count(9) # returns the value how many object repeated 
li.index(56) # return the index of perticular given element




# Method of List Object
li.sort() # Sorts the list in asending order
li.pop() # last index value(last element)
li.pop(1) # Removes the items from the specified index
li


[1, 9, 9, 16, 25, 29]
In [15]:
li1 = [1,6,19,25]
li.extend(li1)
li.reverse()
li.sort()

# Function to return the large number from the list
def largeNumber(li):
    li.sort()
    return li[-1]
def genericLarge(li,n):
    li.sort()
    return li[-n]
li = [19,1,25,6,9,45,22]
print(largeNumber(li))
print(genericLarge(li,3))
45
22


# Function to find least and Generic Least number from the list
def leastNumber(li):
    li.sort()
    return li[0]
def genericLeastNumber(li,n):
    li.sort()
    return li[n-1]
li = [19,1,25,6,9,45,22]
print(leastNumber(li))
print(genericLeastNumber(li,4))
1
19



Tuples
parenthesis()-->Tuple and square brackets[]-->list
Difference between list and tuples
lists are mutable - can be changed / modified
Used to access modify, Add, Delete data
Tuples are immutable - cannot be changed
Used to access data only

t1 = (1,2,3,4,5,6)
print(type(t1),t1[1:5])
<class 'tuple'> (2, 3, 4, 5)

Dictionaries
It works on the concept of Set Unique Data
Keys,Values is the unique identifier for a value
Each key is separted from its values with colon(:)
Each key and value is separted by comma(,)
Dictionaries enclosed with Curly braces({})
keys(),values(),items() methods
In [21]:
d1 = {"Name":"Gitam","EmailId":"gitam@gmail.com","Address":"Hyderabad"}
print(d1)
{'Name': 'Gitam', 'EmailId': 'gitam@gmail.com', 'Address': 'Hyderabad'}
In [22]:
d1["Name"] # Acces the specific key
Out[22]:
'Gitam'
In [23]:
d1['EmailId'] = 'Gitam-Python@gmail.com' # Update the data
In [24]:
d1['EmailId']
Out[24]:
'Gitam-Python@gmail.com'
In [30]:
d1['course'] = 'python'#Adding an entry
d1
Out[30]:
{'Name': 'Gitam', 'Address': 'Hyderabad', 'course': 'python'}
In [25]:
del d1['EmailId'] # Delete the specific key value
In [26]:
d1 # del d1 will delete the entire dict object
Out[26]:
{'Name': 'Gitam', 'Address': 'Hyderabad'}
In [27]:
d1.keys() # returns the list of keys
Out[27]:
dict_keys(['Name', 'Address'])
In [28]:
d1.values() # returns the values
Out[28]:
dict_values(['Gitam', 'Hyderabad'])
In [29]:
d1.items() # the ist of tuples of keys and values
Out[29]:
dict_items([('Name', 'Gitam'), ('Address', 'Hyderabad')])
In [32]:


In [ ]:

str="promizeit"
print(str)
print(type(str))
print(str[0])
print(str[1])
print(str[-1])
print(str[len(str)-1])
print(str[-3])
print(str[-1::-1])# string reverse
print(str[1:-1])## removes 1st and last characters
print(str[len(str)//2])
print(str[-1:-3:-1])
print(str[::3])
print(str[::2])
print(str[ : ])
print(str[::-1])#get the string in reverse order

a="venu"
print(a[::-1])
print(a[-1::-1])
def pol(str):
    return str==str[::-1]
        
print(pol("dad"))
print(pol("amma"))
#pol("venu")
    a="veNU"
print(a.upper())
print(a.lower())
